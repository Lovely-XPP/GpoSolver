CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

OPTION(MOSEK_SOLVER "Enable MOSEK solver" OFF)
OPTION(CSDP_SOLVER "Enable CSDP solver" OFF)
OPTION(SDPA_SOLVER "Enable SDPA solver" ON)
set(CSDP_INCLUDE_DIR "../CSDP/include/")
set(CSDP_LIBRARY_DIR "../CSDP/lib/")

# Build type ##################################################################

IF (NOT CMAKE_BUILD_TYPE)
  MESSAGE("-- No build type specified; defaulting to CMAKE_BUILD_TYPE=Release.")
  SET(CMAKE_BUILD_TYPE RELEASE CACHE STRING
    "Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel."
   FORCE)
ENDIF()

# CXX flags ###################################################################

INCLUDE_DIRECTORIES("include")

SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-unused-parameter")
SET(CMAKE_CXX_FLAGS_RELEASE "-DEIGEN_NO_DEBUG -DNDEBUG -O3")
SET(CMAKE_CXX_FLAGS_DEBUG "-O2")

# GCC #########################################################################

IF(CMAKE_COMPILER_IS_GNUCXX)
  EXEC_PROGRAM(
      ${CMAKE_CXX_COMPILER}
      ARGS                    --version
      OUTPUT_VARIABLE _compiler_output)
  STRING(REGEX REPLACE ".* ([0-9]\\.[0-9]\\.[0-9]).*" "\\1"
        GCC_COMPILER_VERSION ${_compiler_output})
ENDIF(CMAKE_COMPILER_IS_GNUCXX)

IF (CMAKE_BUILD_TYPE STREQUAL "RELEASE")
  IF (CMAKE_COMPILER_IS_GNUCXX)
    # Linux
    IF (CMAKE_SYSTEM_NAME MATCHES "Linux")
      IF (GCC_COMPILER_VERSION VERSION_GREATER 4.2)
        SET (CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -march=native -mtune=native")
      ENDIF (GCC_COMPILER_VERSION VERSION_GREATER 4.2)
    ENDIF (CMAKE_SYSTEM_NAME MATCHES "Linux")
  ENDIF (CMAKE_COMPILER_IS_GNUCXX)
ENDIF (CMAKE_BUILD_TYPE STREQUAL "RELEASE")

# Shared packages###############################################################

SET(CMAKE_THREAD_PREFER_PTHREAD TRUE)
FIND_PACKAGE(Threads REQUIRED)

FIND_PACKAGE(OpenMP REQUIRED)
IF(OPENMP_FOUND)
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
ENDIF(OPENMP_FOUND)

# Eigen #######################################################################

FIND_PACKAGE(PkgConfig)
PKG_CHECK_MODULES(PC_EIGEN eigen3)
FIND_PATH(EIGEN_INCLUDE_DIR Eigen/Core HINTS ${PC_EIGEN_INCLUDEDIR} ${PC_EIGEN_INCLUDE_DIRS} PATH_PREFIX eigen3)
FIND_PACKAGE_HANDLE_STANDARD_ARGS(Eigen DEFAULT_MSG EIGEN_INCLUDE_DIR)
IF(EIGEN_FOUND)
    INCLUDE_DIRECTORIES(${EIGEN_INCLUDE_DIR})
    MESSAGE(STATUS "Found Eigen: ${EIGEN_INCLUDE_DIR}")
ELSE(EIGEN_FOUND)
    MESSAGE(FATAL_ERROR "Eigen library not found: please set EIGEN_INCLUDE_DIR in order to compile GpoSolver")
ENDIF(EIGEN_FOUND)

# MOSEK solver ################################################################

IF (MOSEK_SOLVER)
    FIND_PATH(MOSEK_INCLUDE mosek.h PATHS ${MOSEK_INCLUDE_DIR})
    IF (MOSEK_INCLUDE STREQUAL "MOSEK_INCLUDE-NOTFOUND")
        MESSAGE(WARNING "MOSEK includes not found: please set MOSEK_INCLUDE_DIR in order to enable MOSEK solver")
    ELSE (MOSEK_INCLUDE STREQUAL "MOSEK_INCLUDE-NOTFOUND")
        INCLUDE_DIRECTORIES(${MOSEK_INCLUDE})
        MESSAGE(STATUS "Found MOSEK includes: " ${MOSEK_INCLUDE})

        FIND_LIBRARY(MOSEK_LIBRARY "mosek64" PATHS ${MOSEK_LIBRARY_DIR})
        IF (MOSEK_LIBRARY STREQUAL "MOSEK_LIBRARY-NOTFOUND")
            MESSAGE(WARNING "MOSEK library not found: please set MOSEK_LIBRARY_DIR in order to enable MOSEK solver")
        ELSE (MOSEK_LIBRARY STREQUAL "MOSEK_LIBRARY-NOTFOUND")
            MESSAGE(STATUS "Found MOSEK library: " ${MOSEK_LIBRARY})
	    SET(MOSEK_SOLVER_FOUND TRUE)
        ENDIF (MOSEK_LIBRARY STREQUAL "MOSEK_LIBRARY-NOTFOUND")

    ENDIF (MOSEK_INCLUDE STREQUAL "MOSEK_INCLUDE-NOTFOUND")
ELSE (MOSEK_SOLVER)
    MESSAGE(STATUS "MOSEK solver support is disabled.")
ENDIF (MOSEK_SOLVER)

# CSDP solver ################################################################

IF (CSDP_SOLVER)
    FIND_PACKAGE(LAPACK REQUIRED)	
    FIND_PATH(CSDP_INCLUDE declarations.h PATHS ${CSDP_INCLUDE_DIR})
    IF (CSDP_INCLUDE STREQUAL "CSDP_INCLUDE-NOTFOUND")
        MESSAGE(WARNING "CSDP includes not found: please set CSDP_INCLUDE_DIR in order to enable CSDP solver")
    ELSE (CSDP_INCLUDE STREQUAL "CSDP_INCLUDE-NOTFOUND")
        INCLUDE_DIRECTORIES(${CSDP_INCLUDE})
        MESSAGE(STATUS "Found CSDP includes: " ${CSDP_INCLUDE})

        FIND_LIBRARY(CSDP_LIBRARY "sdp" PATHS ${CSDP_LIBRARY_DIR})
        IF (CSDP_LIBRARY STREQUAL "CSDP_LIBRARY-NOTFOUND")
            MESSAGE(WARNING "CSDP library not found: please set CSDP_LIBRARY_DIR in order to enable CSDP solver")
        ELSE (CSDP_LIBRARY STREQUAL "CSDP_LIBRARY-NOTFOUND")
            MESSAGE(STATUS "Found CSDP library: " ${CSDP_LIBRARY})
	    SET(CSDP_SOLVER_FOUND TRUE)
        ENDIF (CSDP_LIBRARY STREQUAL "CSDP_LIBRARY-NOTFOUND")

    ENDIF (CSDP_INCLUDE STREQUAL "CSDP_INCLUDE-NOTFOUND")
ELSE (CSDP_SOLVER)
    MESSAGE(STATUS "CSDP solver support is disabled.")
ENDIF (CSDP_SOLVER)

# SDPA solver ################################################################

IF (SDPA_SOLVER)
    FIND_PACKAGE(LAPACK REQUIRED)	
    FIND_PATH(SDPA_INCLUDE sdpa_call.h ${SDPA_INCLUDE_DIR})
    IF (SDPA_INCLUDE STREQUAL "SDPA_INCLUDE-NOTFOUND")
        MESSAGE(WARNING "SDPA includes not found: please set SDPA_INCLUDE_DIR in order to enable SDPA solver")
    ELSE (SDPA_INCLUDE STREQUAL "SDPA_INCLUDE-NOTFOUND")
        INCLUDE_DIRECTORIES(${SDPA_INCLUDE})
        MESSAGE(STATUS "Found SDPA includes: " ${SDPA_INCLUDE})

        FIND_LIBRARY(SDPA_LIBRARY "sdpa" PATHS ${SDPA_LIBRARY_DIR})
        IF (SDPA_LIBRARY STREQUAL "SDPA_LIBRARY-NOTFOUND")
            MESSAGE(WARNING "SDPA library not found: please set SDPA_LIBRARY_DIR in order to enable SDPA solver")
        ELSE (SDPA_LIBRARY STREQUAL "SDPA_LIBRARY-NOTFOUND")
            MESSAGE(STATUS "Found SDPA library: " ${SDPA_LIBRARY})
		
            FIND_LIBRARY(DMUMPS_LIBRARY "dmumps_seq" PATHS ${DMUMPS_LIBRARY_DIR})
            IF (DMUMPS_LIBRARY STREQUAL "DMUMPS_SEQ_LIBRARY-NOTFOUND")

                FIND_LIBRARY(DMUMPS_LIBRARY "dmumps" PATHS ${DMUMPS_LIBRARY_DIR})
                IF (DMUMPS_LIBRARY STREQUAL "DMUMPS_LIBRARY-NOTFOUND")
                    MESSAGE(WARNING "DMUMPS library not found: please set DMUMPS_LIBRARY_DIR in order to enable SDPA solver")
	        ELSE (DMUMPS_LIBRARY STREQUAL "DMUMPS_LIBRARY-NOTFOUND")
                    MESSAGE(STATUS "Found dmumps library: " ${DMUMPS_LIBRARY})
	            SET(SDPA_SOLVER_FOUND TRUE)
	        ENDIF (DMUMPS_LIBRARY STREQUAL "DMUMP_LIBRARY-NOTFOUND")

    	    ELSE (DMUMPS_LIBRARY STREQUAL "DMUMPS_SEQ_LIBRARY-NOTFOUND")
                MESSAGE(STATUS "Found dmumps library: " ${DMUMPS_LIBRARY})
	        SET(SDPA_SOLVER_FOUND TRUE)
	    ENDIF (DMUMPS_LIBRARY STREQUAL "DMUMPS_SEQ_LIBRARY-NOTFOUND")

        ENDIF (SDPA_LIBRARY STREQUAL "SDPA_LIBRARY-NOTFOUND")
    ENDIF (SDPA_INCLUDE STREQUAL "SDPA_INCLUDE-NOTFOUND")
ELSE (SDPA_SOLVER)
    MESSAGE(STATUS "SDPA solver support is disabled.")
ENDIF (SDPA_SOLVER)

# Problem solvers #############################################################

MESSAGE(STATUS "")

SET(CMAKE_CXX_FLAGS_BKP ${CMAKE_CXX_FLAGS})
 
IF (MOSEK_SOLVER_FOUND) 

    MESSAGE(STATUS "Will be building MOSEK based solvers.")

    SET(EXAMPLE_MOSEK "stress_matrix_problem")
    ADD_EXECUTABLE(${EXAMPLE_MOSEK} examples/stress_matrix_problem.cpp examples/test.cpp) 
    SET_TARGET_PROPERTIES(${EXAMPLE_MOSEK} PROPERTIES APPEND_STRING PROPERTY COMPILE_FLAGS "-DMOSEK_SOLVER")
    TARGET_LINK_LIBRARIES(${EXAMPLE_MOSEK} ${MOSEK_LIBRARY})
    TARGET_LINK_LIBRARIES(${EXAMPLE_MOSEK} ${CMAKE_THREAD_LIBS_INIT})

ENDIF (MOSEK_SOLVER_FOUND)      

IF (CSDP_SOLVER_FOUND) 

    MESSAGE(STATUS "Will be building CSDP based solvers.")

    SET(EXAMPLE_CSDP "stress_matrix_problem")
    ADD_EXECUTABLE(${EXAMPLE_CSDP} examples/stress_matrix_problem.cpp examples/test.cpp) 
    SET_TARGET_PROPERTIES(${EXAMPLE_CSDP} PROPERTIES APPEND_STRING PROPERTY COMPILE_FLAGS "-DCSDP_SOLVER")
    TARGET_LINK_LIBRARIES(${EXAMPLE_CSDP} ${CSDP_LIBRARY})
    TARGET_LINK_LIBRARIES(${EXAMPLE_CSDP} ${LAPACK_LIBRARIES})
    TARGET_LINK_LIBRARIES(${EXAMPLE_CSDP} ${BLAS_LIBRARIES})

ENDIF (CSDP_SOLVER_FOUND)      

IF (SDPA_SOLVER_FOUND) 
    MESSAGE(STATUS "Will be building SDPA based solvers.")

    SET(EXAMPLE_SDPA "stress_matrix_problem")
    ADD_EXECUTABLE(${EXAMPLE_SDPA} examples/stress_matrix_problem.cpp examples/test.cpp) 
    SET_TARGET_PROPERTIES(${EXAMPLE_SDPA} PROPERTIES APPEND_STRING PROPERTY COMPILE_FLAGS "-DSDPA_SOLVER")
    TARGET_LINK_LIBRARIES(${EXAMPLE_SDPA} ${SDPA_LIBRARY})
    TARGET_LINK_LIBRARIES(${EXAMPLE_SDPA} ${LAPACK_LIBRARIES})
    TARGET_LINK_LIBRARIES(${EXAMPLE_SDPA} ${DMUMPS_LIBRARY})
ENDIF (SDPA_SOLVER_FOUND)      

MESSAGE(STATUS "")